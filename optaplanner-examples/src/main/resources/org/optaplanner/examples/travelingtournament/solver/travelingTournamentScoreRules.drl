/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.travelingtournament.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.travelingtournament.domain.Match;
import org.optaplanner.examples.travelingtournament.domain.Day;
import org.optaplanner.examples.travelingtournament.domain.Team;
import org.optaplanner.examples.travelingtournament.domain.TravelingTournament;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// multipleMatchesPerTeamPerDay is obsolete because it is always 0

rule "fourConsecutiveHomeMatches"
    when
        $m : Match($homeTeam : homeTeam, $day1 : day)
        Match(homeTeam == $homeTeam, eval(day.getIndex() == $day1.getIndex() + 1))
        Match(homeTeam == $homeTeam, eval(day.getIndex() == $day1.getIndex() + 2))
        Match(homeTeam == $homeTeam, eval(day.getIndex() == $day1.getIndex() + 3))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "fourConsecutiveAwayMatches"
    when
        $m : Match($awayTeam : awayTeam, $day1 : day)
        Match(awayTeam == $awayTeam, eval(day.getIndex() == $day1.getIndex() + 1))
        Match(awayTeam == $awayTeam, eval(day.getIndex() == $day1.getIndex() + 2))
        Match(awayTeam == $awayTeam, eval(day.getIndex() == $day1.getIndex() + 3))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "matchRepeater"
    when
        $m : Match($homeTeam : homeTeam, $awayTeam : awayTeam, $day1 : day)
        Match(homeTeam == $awayTeam, awayTeam == $homeTeam, eval(day.getIndex() == $day1.getIndex() + 1))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "startToAwayHop"
    when
        $m : Match($toTeam : homeTeam, $team : awayTeam, $day : day)
        not Day(eval(index == $day.getIndex() - 1))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $team.getDistance($toTeam));
end
rule "homeToAwayHop"
    when
        $m1 : Match($team : homeTeam, $day1 : day)
        $m2 : Match($toTeam : homeTeam, awayTeam == $team, eval(day.getIndex() == $day1.getIndex() + 1))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $team.getDistance($toTeam));
end
rule "awayToAwayHop"
    when
        $m1 : Match($fromTeam : homeTeam, $team : awayTeam, $day1 : day)
        $m2 : Match($toTeam : homeTeam, awayTeam == $team, eval(day.getIndex() == $day1.getIndex() + 1))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $fromTeam.getDistance($toTeam));
end
rule "awayToHomeHop"
    when
        $m1 : Match($fromTeam : homeTeam, $team : awayTeam, $day1 : day)
        $m2 : Match(homeTeam == $team, eval(day.getIndex() == $day1.getIndex() + 1))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $fromTeam.getDistance($team));
end
rule "awayToEndHop"
    when
        $m : Match($fromTeam : homeTeam, $team : awayTeam, $day : day)
        not Day(eval(index == $day.getIndex() + 1))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $fromTeam.getDistance($team));
end
