/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.nurserostering.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.nurserostering.domain.DayOfWeek;
import courtscheduler.domain.CourtSchedule;
import courtscheduler.domain.MatchAssignment;


global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// http://docs.jboss.org/drools/release/5.3.0.Final/drools-expert-docs/html/ch05.html#d0e2777
// format:
// rule "rule_name"
//    when
//        LHS: Drools Rules; specifies a condition
//        (when does the rule take effect?)
//    then
//        RHS: Java; specifies the action
//        (what do we do when the rule is applicable?)

// All constraints will try to optimize the solution to the highest score.
// For hard constraints, this will probably be zero (because each violation of a hard
//    constraint will result in subtracting from the solution's hard score).

// can't have the same team playing themselves
rule "noMirrorMatch"
    when
        // something happens
        MatchAssignment(team1 == team2)
    then
        // do something
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


// can't have two teams playing if they don't have the same gender, grade, and level
rule "genderGradeLevelAreSame"
    when
        // something happens
        MatchAssignment($team1 : team1, $team2 : team2)
        eval(false)
    then
        // do something
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// can only have up to N matches at the same time on the same day


// ############################################################################
// Soft constraints
// ############################################################################

