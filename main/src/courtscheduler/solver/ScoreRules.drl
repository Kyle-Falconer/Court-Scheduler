/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.nurserostering.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.nurserostering.domain.DayOfWeek;
import courtscheduler.domain.CourtSchedule;
import courtscheduler.domain.Match;
import courtscheduler.domain.Team;


global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// http://docs.jboss.org/drools/release/5.3.0.Final/drools-expert-docs/html/ch05.html#d0e2777
// format:
// rule "rule_name"
//    when
//        LHS: Drools Rules; specifies a condition
//        (when does the rule take effect?)
//    then
//        RHS: Java; specifies the action
//        (what do we do when the rule is applicable?)

// All constraints will try to optimize the solution to the highest score.
// For hard constraints, this will probably be zero (because each violation of a hard
//    constraint will result in subtracting from the solution's hard score).

// THIS DOES NOT HANDLE THE CASE WHERE A TEAM HAS (BACK TO BACK AND DOUBLE HEADERS) SET TO "TRUE"
// Not sure if this is a necessary constraint?

// teams should not play twice on one day if they do not want double headers or back to back games
rule "noTwoGameDay"
    when
        $Match1 : Match($t1 : t1)
        $Match2 : Match(t1 == $t1)
        Team(teamName == $t1, DoubleHeader == false, BackToBack == false)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end


/*


// ############################################################################
// Soft constraints
// ############################################################################

// team likes double headers
rule "doubleHeader"
    when
        $Match1 : Match($t1 : t1, $date : Date, $time : Time)
        $Match2 : Match(t1 == $t1, Date = $date, Time != $time + 2)
        Team(teamName : $t1, DoubleHeader == true)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, DoubleHeaderPreference.getWeight())
end

// team likes back to back
rule "backToBack"
    when
        $Match1 : Match($t1 : t1, $date : Date, $time : Time)
        $Match2 : Match(t1 == $t1, Date = $date, Time != $time + 1)
        Team(teamName : $t1, BackToBack == true)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, BackToBackPreference.getWeight())
end
*/